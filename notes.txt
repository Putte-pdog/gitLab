git status
we can type git status anywhere in the repo and get information about what branc we are in, what state we are in and what files are tracked/not tracked lastly we can see what files has changed.

git diff
when we run git diff we get a report of all the local changes made since latest commit. We can also specify a single dir or file to diff against.

moreover we can use diff like such:
git diff pointer..pointer

where pointer can be a branch name or commit name. This will generate differences between the two snapshots.

git branch
we can list all local branches using git branch.

git checkout
will change from current workspace to a snapshot of commit or branch. Use git branch -b [name] to create a new branch with name [name]

git merge
with merge, we can specify a branch to merge from, into *this branch*. You will find out what *this branch* is from git status and you change branch with git checkout

git add
adds a file into "stage" or "index" marking it ready for commitment. In Git, we need to make changes AND explicitly tell that we want to include the change in the long transaction. This inclusion is done with git add.

git commit
commits the added changes, creating a new commit. This is done locally and can be "published" to the remote repo with git push.

git push
push the local commits to the remote repo. The remote will deny your push if you are not up to date (long transaction). You will need to merge in changes from remote, commit these merges before pushing again.

git pull
fetches changes from remote ant tries to merge them with local changes. This is the most common way to update your local repo and is similar to CVS commands such as cvs update.

Try these scenarios and note what happens:
Person A changes file X while person B changes file X (never same line)
This scenario was done automatically by git. Since no merge conflict was detected, everything worked seemlessly. However, git first told us to pull before push.

Person A changes files X,Y while person B changes file Y (never same line)
When Patrik tried to push his changes, he was denied because Erik has updated notes.txt! Strict Long Transaction???

Later, when patrick did resolve the SLT, he just pushed hist source coude changes. Erik could then commit his Y file and got denied on push (LT). After pulling, auto-merging (no true conflicts found), Erik was able to push.

Person A changes some small things in file X, while person B is appending to X.
Erik removed getFather and setFather methods. Patrik appedned to MyNode at the end of the file. Merge was automatic just as above examples.

Person A and B changes the name of the same function in paralell.
When patrik did git pull, he got conflicted. After fixing, he could add the fixing changes and then commit and push.

Person A changes file X on two lines. Person B conflicts these changes. The mergee accidentally only resolves one of the two conflicts.
Patrik gets two merge conflicts in his file. He resolves one of them but "forgets" the other. Git gives no feedback what so ever that he accidentally missed one resolution. He is able to push like normal, completely unaware that he is commiting ">>>>>>>>>>>> and ==========" syntax.


CREATING RELEASES:
we simply use:
git checkout COMMIT_HASH
git tag release1 // represented as tag

or we do:
git checkout COMMIT_HASH
git checkout -b release1 // represented as branch
